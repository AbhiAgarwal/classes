# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: debate.proto

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='debate.proto',
  package='debate',
  syntax='proto2',
  serialized_pb=b'\n\x0c\x64\x65\x62\x61te.proto\x12\x06\x64\x65\x62\x61te\"2\n\rAnswerRequest\x12\x10\n\x08question\x18\x01 \x01(\t\x12\x0f\n\x07timeout\x18\x02 \x01(\r\"\x1d\n\x0b\x41nswerReply\x12\x0e\n\x06\x61nswer\x18\x01 \x01(\t\"3\n\x10\x45laborateRequest\x12\r\n\x05topic\x18\x01 \x01(\t\x12\x10\n\x08\x62lah_run\x18\x02 \x03(\r\" \n\x0e\x45laborateReply\x12\x0e\n\x06\x61nswer\x18\x01 \x01(\t2\x84\x01\n\tCandidate\x12\x36\n\x06\x41nswer\x12\x15.debate.AnswerRequest\x1a\x13.debate.AnswerReply\"\x00\x12?\n\tElaborate\x12\x18.debate.ElaborateRequest\x1a\x16.debate.ElaborateReply\"\x00'
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_ANSWERREQUEST = _descriptor.Descriptor(
  name='AnswerRequest',
  full_name='debate.AnswerRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='question', full_name='debate.AnswerRequest.question', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timeout', full_name='debate.AnswerRequest.timeout', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=24,
  serialized_end=74,
)


_ANSWERREPLY = _descriptor.Descriptor(
  name='AnswerReply',
  full_name='debate.AnswerReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='answer', full_name='debate.AnswerReply.answer', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=76,
  serialized_end=105,
)


_ELABORATEREQUEST = _descriptor.Descriptor(
  name='ElaborateRequest',
  full_name='debate.ElaborateRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='topic', full_name='debate.ElaborateRequest.topic', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='blah_run', full_name='debate.ElaborateRequest.blah_run', index=1,
      number=2, type=13, cpp_type=3, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=107,
  serialized_end=158,
)


_ELABORATEREPLY = _descriptor.Descriptor(
  name='ElaborateReply',
  full_name='debate.ElaborateReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='answer', full_name='debate.ElaborateReply.answer', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=160,
  serialized_end=192,
)

DESCRIPTOR.message_types_by_name['AnswerRequest'] = _ANSWERREQUEST
DESCRIPTOR.message_types_by_name['AnswerReply'] = _ANSWERREPLY
DESCRIPTOR.message_types_by_name['ElaborateRequest'] = _ELABORATEREQUEST
DESCRIPTOR.message_types_by_name['ElaborateReply'] = _ELABORATEREPLY

AnswerRequest = _reflection.GeneratedProtocolMessageType('AnswerRequest', (_message.Message,), dict(
  DESCRIPTOR = _ANSWERREQUEST,
  __module__ = 'debate_pb2'
  # @@protoc_insertion_point(class_scope:debate.AnswerRequest)
  ))
_sym_db.RegisterMessage(AnswerRequest)

AnswerReply = _reflection.GeneratedProtocolMessageType('AnswerReply', (_message.Message,), dict(
  DESCRIPTOR = _ANSWERREPLY,
  __module__ = 'debate_pb2'
  # @@protoc_insertion_point(class_scope:debate.AnswerReply)
  ))
_sym_db.RegisterMessage(AnswerReply)

ElaborateRequest = _reflection.GeneratedProtocolMessageType('ElaborateRequest', (_message.Message,), dict(
  DESCRIPTOR = _ELABORATEREQUEST,
  __module__ = 'debate_pb2'
  # @@protoc_insertion_point(class_scope:debate.ElaborateRequest)
  ))
_sym_db.RegisterMessage(ElaborateRequest)

ElaborateReply = _reflection.GeneratedProtocolMessageType('ElaborateReply', (_message.Message,), dict(
  DESCRIPTOR = _ELABORATEREPLY,
  __module__ = 'debate_pb2'
  # @@protoc_insertion_point(class_scope:debate.ElaborateReply)
  ))
_sym_db.RegisterMessage(ElaborateReply)


import abc
from grpc.beta import implementations as beta_implementations
from grpc.early_adopter import implementations as early_adopter_implementations
from grpc.framework.alpha import utilities as alpha_utilities
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities
class EarlyAdopterCandidateServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Answer(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Elaborate(self, request, context):
    raise NotImplementedError()
class EarlyAdopterCandidateServer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def start(self):
    raise NotImplementedError()
  @abc.abstractmethod
  def stop(self):
    raise NotImplementedError()
class EarlyAdopterCandidateStub(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Answer(self, request):
    raise NotImplementedError()
  Answer.async = None
  @abc.abstractmethod
  def Elaborate(self, request):
    raise NotImplementedError()
  Elaborate.async = None
def early_adopter_create_Candidate_server(servicer, port, private_key=None, certificate_chain=None):
  import debate_pb2
  import debate_pb2
  import debate_pb2
  import debate_pb2
  method_service_descriptions = {
    "Answer": alpha_utilities.unary_unary_service_description(
      servicer.Answer,
      debate_pb2.AnswerRequest.FromString,
      debate_pb2.AnswerReply.SerializeToString,
    ),
    "Elaborate": alpha_utilities.unary_unary_service_description(
      servicer.Elaborate,
      debate_pb2.ElaborateRequest.FromString,
      debate_pb2.ElaborateReply.SerializeToString,
    ),
  }
  return early_adopter_implementations.server("debate.Candidate", method_service_descriptions, port, private_key=private_key, certificate_chain=certificate_chain)
def early_adopter_create_Candidate_stub(host, port, metadata_transformer=None, secure=False, root_certificates=None, private_key=None, certificate_chain=None, server_host_override=None):
  import debate_pb2
  import debate_pb2
  import debate_pb2
  import debate_pb2
  method_invocation_descriptions = {
    "Answer": alpha_utilities.unary_unary_invocation_description(
      debate_pb2.AnswerRequest.SerializeToString,
      debate_pb2.AnswerReply.FromString,
    ),
    "Elaborate": alpha_utilities.unary_unary_invocation_description(
      debate_pb2.ElaborateRequest.SerializeToString,
      debate_pb2.ElaborateReply.FromString,
    ),
  }
  return early_adopter_implementations.stub("debate.Candidate", method_invocation_descriptions, host, port, metadata_transformer=metadata_transformer, secure=secure, root_certificates=root_certificates, private_key=private_key, certificate_chain=certificate_chain, server_host_override=server_host_override)

class BetaCandidateServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Answer(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def Elaborate(self, request, context):
    raise NotImplementedError()

class BetaCandidateStub(object):
  """The interface to which stubs will conform."""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Answer(self, request, timeout):
    raise NotImplementedError()
  Answer.future = None
  @abc.abstractmethod
  def Elaborate(self, request, timeout):
    raise NotImplementedError()
  Elaborate.future = None

def beta_create_Candidate_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import debate_pb2
  import debate_pb2
  import debate_pb2
  import debate_pb2
  request_deserializers = {
    ('debate.Candidate', 'Answer'): debate_pb2.AnswerRequest.FromString,
    ('debate.Candidate', 'Elaborate'): debate_pb2.ElaborateRequest.FromString,
  }
  response_serializers = {
    ('debate.Candidate', 'Answer'): debate_pb2.AnswerReply.SerializeToString,
    ('debate.Candidate', 'Elaborate'): debate_pb2.ElaborateReply.SerializeToString,
  }
  method_implementations = {
    ('debate.Candidate', 'Answer'): face_utilities.unary_unary_inline(servicer.Answer),
    ('debate.Candidate', 'Elaborate'): face_utilities.unary_unary_inline(servicer.Elaborate),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_Candidate_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import debate_pb2
  import debate_pb2
  import debate_pb2
  import debate_pb2
  request_serializers = {
    ('debate.Candidate', 'Answer'): debate_pb2.AnswerRequest.SerializeToString,
    ('debate.Candidate', 'Elaborate'): debate_pb2.ElaborateRequest.SerializeToString,
  }
  response_deserializers = {
    ('debate.Candidate', 'Answer'): debate_pb2.AnswerReply.FromString,
    ('debate.Candidate', 'Elaborate'): debate_pb2.ElaborateReply.FromString,
  }
  cardinalities = {
    'Answer': cardinality.Cardinality.UNARY_UNARY,
    'Elaborate': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'debate.Candidate', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
